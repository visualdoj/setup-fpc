name: 'Setup Free Pascal Compiler'

branding:
  icon: 'gitlab'
  color: '#CE9C63'

inputs:
  version:
    description: 'FPC version'
    required: false
    default: '3.2.3'
  cross:
    description: 'Cross compiler settings'
    required: false
    default: 'auto'
  repo:
    description: 'GitHub repo with Free Pascal bundles'
    required: false
    default: 'visualdoj/build-fpc-bundle'
  token:
    description: 'Token to access the repo'
    required: true
    default: ${{ github.token }}
  path:
    path: 'Path to install free pascal'
    required: false
    default: .fpc

outputs:
  cache-hit:
    description: 'The bundle was taken from cache'
    value: ${{ steps.check-cache.outputs.cache-hit }}
  # fpc-bin-path:
  #   description: 'Directory with FPC binaries'
  #   value: ${{ steps.configuration.fpc-bin-path }}
  # fpc-lib-path:
  #   description: 'Directory with ppc* binaries'
  #   value: ${{ steps.configuration.fpc-lib-path }}
  # fpc-units-path:
  #   description: 'Directory with FPC units'
  #   value: ${{ steps.configuration.fpc-units-path }}
  # fpc-cfg-path:
  #   description: 'Path to fpc.cfg'
  #   value: ${{ steps.configuration.fpc-cfg-path }}

runs:
  using: "composite"
  steps:
    - name: Cache installed FPC
      id: check-cache
      uses: actions/cache@v3
      with:
          key:  ".fpc-${{ inputs.version }}-${{ runner.os }}"
          path: ${{ inputs.path }}

    - shell: bash
      run:  mkdir ${{ inputs.path }}

    - name: Download FPC bundle
      if: steps.check-cache.outputs.cache-hit != 'true'
      shell: bash
      run:  gh release download --dir "${{ inputs.path }}" --pattern "fpc-${{ inputs.version }}-${{ runner.os }}.tar.gz" --repo "${{ inputs.repo }}" --skip-existing
      env:
          GITHUB_TOKEN: ${{ inputs.token }}

    - name: Unpack tarball 
      if: steps.check-cache.outputs.cache-hit != 'true'
      working-directory: "${{ github.workspace }}/${{ inputs.path }}"
      shell: bash
      run: |
          tar xvf "fpc-${{ inputs.version }}-${{ runner.os }}.tar.gz"
          rm -f   "fpc-${{ inputs.version }}-${{ runner.os }}.tar.gz"

    - name: Configure (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
           echo "${{ github.workspace }}\${{ inputs.path }}\installed\bin\i386-win32" >> $GITHUB_PATH
           cat  $GITHUB_PATH

    - name: Configure (non-Windows)
      if: runner.os != 'Windows'
      shell: bash
      run: |
           echo  "${{ github.workspace }}/${{ inputs.path }}/installed/bin" >> $GITHUB_PATH
           echo  "${{ github.workspace }}/${{ inputs.path }}/installed/lib/fpc/${{ inputs.version }}" >> $GITHUB_PATH
           # TODO the following line is only for macOS until version detection will be supported
           echo  "${{ github.workspace }}/${{ inputs.path }}/installed/lib/fpc/3.3.1" >> $GITHUB_PATH
           ls -la "${{ github.workspace }}/${{ inputs.path }}/installed"
           cat $GITHUB_PATH

    - name: fpc.cfg (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
           echo "PPC_CONFIG_PATH=${{ github.workspace }}/${{ inputs.path }}" >> $GITHUB_ENV
           echo "FPC_INSTALLED_DIR=${{ github.workspace }}/${{ inputs.path }}/installed" >> $GITHUB_ENV

    - name: fpc.cfg (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
           echo "PPC_CONFIG_PATH=${{ github.workspace }}/${{ inputs.path }}" >> $GITHUB_ENV
           echo "FPC_INSTALLED_DIR=${{ github.workspace }}/${{ inputs.path }}/installed" >> $GITHUB_ENV

    - name: fpc.cfg (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
           echo "PPC_CONFIG_PATH=${{ github.workspace }}/${{ inputs.path }}" >> $GITHUB_ENV
           echo "FPC_INSTALLED_DIR=${{ github.workspace }}/${{ inputs.path }}/installed" >> $GITHUB_ENV
